unit CharPartitions;{еееееееееееееееееееееее}{MacClade Source Code}{Copyright Wayne P. Maddison and David R. Maddison 1986-1991}{No portions of the source code of MacClade can be used in any program,}{or published in any form, without the express written consent of }{Wayne or David Maddison}{еееееееееееееееееееееее}{ееееееееееееееееееееее}interface	uses		QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, Sound, Dialogs, 		TextEdit, QuickDrawText,Lists, ToolUtils, Memory, Fonts, Resources, Scrap,  		Globals, SetLibInterface, UtilLibInterface,  UtilLibInterface, MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, 		ErrorUtil, EventUtil, GenUtil, StrUtil, BoxUtil, TaxonCHUtil, TypeUtil, CharUtil, TreeUtil, 		MenuUtil,ReadWriteUtil,ReadUtil,WriteUtil;	function NumGroupsInCurrentPartition: longint;	procedure RebuildCharPartNamesMenu;	function CharPartNameSelected(partNumber: integer): boolean;	procedure SelectCharPartName(partNumber: integer; on:boolean);	function GetCharPartNamePtr(partNumber: integer): CharPartNamePtr;	function GetCharPartNameNumberFromString(name: str255): integer;	procedure SetNameOfCharPartName(partNumber: integer; name: str255);	function NameOfCharPartNameFromNumber(partNumber:integer): str255;	function PartNameExists(name: str255): boolean;		function GetPartNameInPartition(partNumber: integer): boolean;	procedure SetPartNameInPartition(partNumber: integer; on: boolean);	function GetPartNameInUse(partNumber: integer): boolean;	procedure SetPartNameInUse(partNumber: integer; on: boolean);	function GetPartNameColor(partNumber: integer): RGBColor;	procedure SetPartNameColor(partNumber: integer; newColor: RGBColor);			procedure InitCharPartNamesPtr(thePartName: CharPartNamePtr);	procedure AddNewCharPartName(name: str255);	procedure DestroyCharPartNamePtr(charPartName: CharPartNamePtr);	procedure DestroyCharPartName(partNumber: integer);	procedure EmptyCharPartNames;{ееееееееееееееееееееее}implementation {е$S CharPartitions} {-----------------------------------------------------------------------------}		function NumGroupsInCurrentPartition: longint;		var			ic: integer;			numParts: longint;			thisPart: integer;	begin		for thisPart := 1 to numCharPartNames do 			SetPartNameInPartition(thisPart,false);		for ic := 1 to numchars do			SetPartNameInPartition(CharPartition(ic),true);		numParts := 0;		for thisPart := 1 to numCharPartNames do 			if GetPartNameInPartition(thisPart) then 				numParts := numParts+1;		NumGroupsInCurrentPartition := numParts;	end;{-----------------------------------------------------------------------------}	function CharPartNameSelected(partNumber: integer): boolean;	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		CharPartNameSelected := (thePartName<> nil ) & thePartName^.selected;	end;{-----------------------------------------------------------------------------}	procedure SelectCharPartName(partNumber: integer; on:boolean);	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		if (thePartName<> nil ) then			 thePartName^.selected := on;	end;{----------------------------------------------------------------------------}	procedure RebuildCharPartNamesMenu;	var j : integer;	begin		if fileopen then			begin				for j := myCountMenuItems(CharPartMHdl) downto 1 do					DeleteMenuItem(CharPartMHdl, j);				for j := 1 to numCharPartNames do					AppendLiteralMenuItem(CharPartMHdl,NameOfCharPartNameFromNumber(j));				SetItemStyle(CharPartMHdl,1,[italic]);				AppendMenu(CharPartMHdl,'(-');				AppendMenu(CharPartMHdl,'New Group Label...');			end;	end;{----------------------------------------------------------------------------}	function GetCharPartNameNumberFromString(name: str255): integer;	var thePartName: CharPartNamePtr;		j : integer;		partnumber: integer;	begin		GetCharPartNameNumberFromString := 0;		thePartName := charPartNames;		partnumber := 1;		while thePartName<> nil do			begin				if StringsEqual(@thePartName^.name,@name,255) then					begin						GetCharPartNameNumberFromString := partnumber;						leave;					end				else					begin						thePartName:= thePartName^.next;						partnumber := partnumber+1;					end;			end;	end;{----------------------------------------------------------------------------}	function PartNameExists(name: str255): boolean;	begin		PartNameExists := GetCharPartNameNumberFromString(name)>0;	end;{-----------------------------------------------------------------------------}	function GetCharPartNamePtr(partNumber: integer): CharPartNamePtr;	var thePartName: CharPartNamePtr;		j : integer;	begin		thePartName := nil;		if partNumber<=0 then			thePartName :=nil		else			begin				thePartName := charPartNames;				if partNumber>1 then					for j := 1 to partNumber-1 do						if thePartName <> nil then							thePartName := thePartName^.next;			end;		GetCharPartNamePtr := thePartName;	end;{-----------------------------------------------------------------------------}	function GetPartNameInUse(partNumber: integer): boolean;	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		if thePartName <> nil then			GetPartNameInUse := thePartName^.inUse		else			GetPartNameInUse := false;	end;{-----------------------------------------------------------------------------}	procedure SetPartNameInUse(partNumber: integer; on: boolean);	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		if thePartName <> nil then			thePartName^.inUse := on;	end;{-----------------------------------------------------------------------------}	function GetPartNameColor(partNumber: integer): RGBColor;	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		if thePartName <> nil then			GetPartNameColor := thePartName^.color		else			GetPartNameColor := defaultPartitionRGB;	end;{-----------------------------------------------------------------------------}	procedure SetPartNameColor(partNumber: integer; newColor: RGBColor);	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		if thePartName <> nil then			thePartName^.color := newColor;		charPartitionsChanged := true;	end;{-----------------------------------------------------------------------------}	function GetPartNameInPartition(partNumber: integer): boolean;	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		if thePartName <> nil then			GetPartNameInPartition := thePartName^.inPartition		else			GetPartNameInPartition := false;	end;{-----------------------------------------------------------------------------}	procedure SetPartNameInPartition(partNumber: integer; on: boolean);	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		if thePartName <> nil then			thePartName^.inPartition := on;	end;{-----------------------------------------------------------------------------}	procedure SetNameOfCharPartName(partNumber: integer; name: str255);	var thePartName: CharPartNamePtr;	begin		thePartName := GetCharPartNamePtr(partNumber);		if thePartName <> nil then			thePartName^.name := name;		RebuildCharPartNamesMenu;	end;{-----------------------------------------------------------------------------}	function NameOfCharPartNameFromNumber(partNumber:integer): str255;	var thePartName: CharPartNamePtr;		j : integer;	begin		NameOfCharPartNameFromNumber := '';		thePartName := GetCharPartNamePtr(partNumber);		if thePartName <> nil then			NameOfCharPartNameFromNumber := thePartName^.name;	end;{-----------------------------------------------------------------------------}	procedure InitCharPartNamesPtr(thePartName: CharPartNamePtr);	begin		if thePartName <> nil then			with thePartName^ do				begin					prev:= nil;					next := nil;					name := '';					color := defaultPartitionRGB;					selected := false;					inUse := false;					inPartition := false;				end;	end;{-----------------------------------------------------------------------------}	procedure AddNewCharPartName(name: str255);	var thePartName: CharPartNamePtr;	begin		thePartName := charPartNames;		if thePartName <> nil then			while thePartName^.next <> nil do				begin					thePartName := thePartName^.next;				end;		thePartName^.next := CharPartNamePtr(NewPtrClear(SizeOf(CharPartNameRecord)));		InitCharPartNamesPtr(thePartName^.next);		thePartName^.next^.Name := name;					thePartName^.next^.prev := thePartName;		numCharPartNames:= numCharPartNames+1;				RebuildCharPartNamesMenu;	end;{-----------------------------------------------------------------------------}	procedure DestroyCharPartNamePtr(charPartName: CharPartNamePtr);	begin		if (charPartName = CharPartNames) then			begin				if  (numCharPartNames>1) then					begin						CharPartNames := charPartName^.next;						CharPartNames^.prev := nil;						numCharPartNames:= numCharPartNames-1;						ZapPointer(charPartName);					end				else					begin						InitCharPartNamesPtr(charPartName);					end;			end		else if charPartName <> nil then			begin				if charPartName^.next <> nil then					charPartName^.next^.prev := charPartName^.prev;				if charPartName^.prev <> nil then					charPartName^.prev^.next := charPartName^.next;				numCharPartNames:= numCharPartNames-1;				ZapPointer(charPartName);			end;		charPartitionsChanged := true;	end;{-----------------------------------------------------------------------------}	procedure DestroyCharPartName(partNumber: integer);	var charPartName: CharPartNamePtr;	begin		charPartName := GetCharPartNamePtr(partNumber);		DestroyCharPartNamePtr(charPartName);		RebuildCharPartNamesMenu;	end;{-----------------------------------------------------------------------------}	procedure EmptyCharPartNames;	var charPartName, nextName: CharPartNamePtr;	begin		charPartName := charPartNames^.next;		while charPartName<> nil do			begin				nextName := charPartName^.next;				DestroyCharPartNamePtr(charPartName);				charPartName:= nextName;			end;	end;end.