unit SettingsUtil;{еееееееееееееееееееееее}interface	uses		QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, Sound, Dialogs, TextEdit, 		QuickDrawText,Lists, ToolUtils, Memory, Fonts, Resources, Scrap,  		Globals, SetLibInterface, UtilLibInterface,  MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, ErrorUtil, EventUtil, 		GenUtil, StrUtil, BoxUtil, CharUtil, SymbolsNames, WriteUtil, ReadWriteUtil, ReadUtil, {$IFC SPEECH}		Speech, {$ENDC}		Legends, InfoWindows, SpreadUtil,ReadWriteGeneticCode;	function GetSettingsPtr(whichSettings, settingsNumber: integer): SettingsPtr;	function GetSettingsPtrFromID(whichSettings,  id: integer): SettingsPtr;	function GetSettingsPtrFromName(whichSettings: integer; name,subname: str255): SettingsPtr;	function MultipleSettingsWithName(whichSettings: integer; name: str255): boolean;	procedure InitSettingsPtr(theSettings: settingsPtr);	procedure InitSettings(whichSettings, settingsNumber: integer);	procedure AddNewSettings(whichSettings: integer; name,subName: str255; id,subID,subVersionRequired: integer; willWrite: boolean);	procedure DestroySettings(whichSettings, settingsNumber: integer);	procedure CleanOutSettings(whichSettings, settingsNumber: integer);	procedure EmptySettings(whichSettings: integer);	procedure SetSettingsWillWrite(whichSettings,settingsNumber,settingsSubid: integer; willWrite: boolean);	function GetSettingsWillWrite(whichSettings,settingsNumber: integer): boolean;	procedure PutSpace;	procedure PutFontNameToFile(theFont: integer);	procedure PutNumberToFile(dL : longint);	procedure PutStyleToFile(s: Style);	procedure PutRealToFile(realValue: double; sigDigits: integer);	procedure PutWindowPositionToFile(theWindow: WindowPtr);	const		preferencesRead = 0;		preferencesWrite =1;		preferencesFactory=2;				notASubID = -1;		{еееееееееееееееееееееее}implementation {е$S Settings}	const{There is a procedure called "InitFilePreferences".  }{This procedure sets all of the variable values that need to be reset with each }{file.  These variables follow exactly the order in the settings system.  If you change the settings system}{in any way, this procedure should be altered too.  There is also another procedure called InitProgramPreferences,}{for preferences reset only at start of programs.  }{The Preferences system works as follows:}{  on StartUp:    }{		InitFilePreferences;  				(sets to factory defaults) }{		InitProgramPreferences;  			(sets to factory defaults) }{		InitLaser;  							(sets PrintTree to factory defaults)}{		SetStandardCode(nuclearcode);   	(sets genetic code to factory default) }{		Read in file Preferences from a Preferences file, if they exist}{ 			all preference id's between minFileSetid and maxFileSetid}{		Read in program Preferences from a Preferences file, if they exist}{ 			all preference id's between minProgSetid and maxProgSetid}{ on opening other file or new file:}{		InitFilePreferences;  				(sets to factory defaults) }{		InitLaser;  							(sets PrintTree to factory defaults)}{		SetStandardCode(nuclearcode);   	(sets genetic code to factory default) }{		Read in file Preferences from a Preferences file, if they exist}{ 			all preference id's between minFileSetid and maxFileResSetid}{				as well as filespecificid}{			(file preferences for maxFileResSetid + 1 to  maxFileSetid specified by NEXUS format)}{There are thus 3 sorts of preferences:}{1. preferences that are read in from the preferences file only when the program starts up}	{id numbers from minProgSetId to maxProgSetID}{2. preferences that are read in from the preferences file just before opening a file or creating a new file}	{these sorts of preferences are all stored in the data file too, in the resource fork and elsewhere}	{id numbers from minFileSetId to maxFileSetID}{3. preferences that are so file-specific they are only stored in the data file}	{if MacClade detects that the file was last written by a program other than itself, then this preferences}	{type is NOT processed!!!}	{this is id number filespecificid}{To incorporate a Set Defaults button into a dialog, remember to call }{	SetDialogValuesAsDefaults(theDialog, id1,id2, id3) when button pressed}{	standard size of Set Defaults: 20 x 96 pixels}{||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||}{-----------------------------------------------------------------------------}	function GetSettingsPtr(whichSettings,settingsNumber: integer): SettingsPtr;	var theSettings: SettingsPtr;		j : integer;	begin		if settingsNumber<=0 then			theSettings :=nil		else			begin				theSettings := baseSettings[whichSettings];				if settingsNumber>1 then					for j := 1 to settingsNumber-1 do						if theSettings <> nil then							theSettings := theSettings^.next;			end;		GetSettingsPtr := theSettings;	end;{-----------------------------------------------------------------------------}	function GetSettingsPtrFromID(whichSettings, id: integer): SettingsPtr;	var theSettings: SettingsPtr;		j : integer;	begin		GetSettingsPtrFromID := nil;		theSettings := baseSettings[whichSettings];		while theSettings<> nil do			begin				if theSettings^.id= id then					begin						GetSettingsPtrFromID := theSettings;						leave;					end				else					theSettings:= theSettings^.next;			end;	end;{-----------------------------------------------------------------------------}	function GetSettingsPtrFromIDAndSubID(whichSettings, id,subid: integer): SettingsPtr;	var theSettings: SettingsPtr;		j : integer;	begin		GetSettingsPtrFromIDAndSubID := nil;		theSettings := baseSettings[whichSettings];		while theSettings<> nil do			begin				if (theSettings^.id= id) & ((theSettings^.subid = subid)|(subid=notASubID)) then					begin						GetSettingsPtrFromIDAndSubID := theSettings;						leave;					end				else					theSettings:= theSettings^.next;			end;	end;{-----------------------------------------------------------------------------}	function GetSettingsPtrFromName(whichSettings: integer; name,subname: str255): SettingsPtr;	var theSettings: SettingsPtr;		j : integer;	begin		GetSettingsPtrFromName := nil;		if name <> '' then			begin				theSettings := baseSettings[whichSettings];				while theSettings<> nil do					begin						if StringsEqual(@theSettings^.name,@name,maxtok) & ((theSettings^.subName='') |StringsEqual(@theSettings^.subName,@subname,maxtok)) then							begin								GetSettingsPtrFromName := theSettings;								leave;							end						else							theSettings:= theSettings^.next;					end;			end;	end;{-----------------------------------------------------------------------------}	function MultipleSettingsWithName(whichSettings: integer; name: str255): boolean;	var theSettings: SettingsPtr;		foundone: boolean;	begin		MultipleSettingsWithName := false;		foundone := false;		theSettings := baseSettings[whichSettings];		while theSettings<> nil do			begin				if StringsEqual(@theSettings^.name,@name,maxtok) then					begin						if foundone then							begin								MultipleSettingsWithName := true;								leave;							end						else							theSettings:= theSettings^.next;						foundone := true;					end				else					theSettings:= theSettings^.next;			end;	end;{-----------------------------------------------------------------------------}	procedure InitSettingsPtr(theSettings: settingsPtr);	begin		if theSettings <> nil then			with theSettings^ do				begin					prev:= nil;					next := nil;					id := notSettingsID;					subID := notASubID;					subVersionRequired := MacCladeBlockSubVersionNumber;					name := '';					subName := '';					willWrite := false;					SetHandleSize(H,0);				end;	end;{-----------------------------------------------------------------------------}	procedure InitSettings(whichSettings,settingsNumber: integer);	var theSettings: SettingsPtr;	begin		theSettings := GetSettingsPtr(whichSettings,settingsNumber);		InitSettingsPtr(theSettings);	end;{-----------------------------------------------------------------------------}	procedure SetSettingsWillWrite(whichSettings,settingsNumber,settingsSubid: integer; willWrite: boolean);	var theSettings: SettingsPtr;	begin		theSettings := GetSettingsPtrFromIDAndSubID(whichSettings,settingsNumber,settingsSubid);		if theSettings <> nil then			theSettings^.willWrite := WillWrite;	end;{-----------------------------------------------------------------------------}	function GetSettingsWillWrite(whichSettings,settingsNumber: integer): boolean;	var theSettings: SettingsPtr;	begin		theSettings := GetSettingsPtr(whichSettings,settingsNumber);		GetSettingsWillWrite := (theSettings <> nil ) & theSettings^.willWrite;	end;{-----------------------------------------------------------------------------}	procedure AddNewSettings(whichSettings: integer; name,subName: str255; id,subID,subVersionRequired: integer; willWrite: boolean);	var theSettings: SettingsPtr;	begin		if whichSettings = bothSettings then			begin				AddNewSettings(fileSettings,name,subName,id,subID,subVersionRequired,true);				AddNewSettings(programSettings,name,subName,id,subID,subVersionRequired,false);			end		else			begin				theSettings := baseSettings[whichSettings];				if theSettings <> nil then					while theSettings^.next <> nil do						begin							theSettings := theSettings^.next;						end;				theSettings^.next := SettingsPtr(NewPtrClear(SizeOf(SettingsRecord)));				InitSettingsPtr(theSettings^.next);				theSettings^.next^.name := name;				theSettings^.next^.subname := subName;				theSettings^.next^.id := id;				theSettings^.next^.subid := subid;				theSettings^.next^.willWrite := willWrite;				theSettings^.next^.H := NewHandle(0);					if subVersionRequired>0 then					theSettings^.next^.subVersionRequired := subVersionRequired;									theSettings^.next^.prev := theSettings;				numSettings[whichSettings]:= numSettings[whichSettings]+1;			end;	end;{-----------------------------------------------------------------------------}	procedure DestroySettingsPtr(whichSettings: integer; theSettings: SettingsPtr);	begin		if (theSettings = baseSettings[whichSettings]) then			begin				if  (numSettings[whichSettings]>1) then					begin						baseSettings[whichSettings] := theSettings^.next;						baseSettings[whichSettings]^.prev := nil;						numSettings[whichSettings]:= numSettings[whichSettings]-1;						ZapHandle(theSettings^.H);						ZapPointer(theSettings);					end				else					begin						InitSettingsPtr(theSettings);					end;			end		else if theSettings <> nil then			begin				if theSettings^.next <> nil then					theSettings^.next^.prev := theSettings^.prev;				if theSettings^.prev <> nil then					theSettings^.prev^.next := theSettings^.next;				numSettings[whichSettings]:= numSettings[whichSettings]-1;				ZapHandle(theSettings^.H);				ZapPointer(theSettings);			end;	end;{-----------------------------------------------------------------------------}	procedure DestroySettings(whichSettings, settingsNumber: integer);	var theSettings: SettingsPtr;	begin		theSettings := GetSettingsPtr(whichSettings, settingsNumber);		DestroySettingsPtr(whichSettings,theSettings);	end;{-----------------------------------------------------------------------------}	procedure EmptySettings(whichSettings: integer);	var theSettings, nextSettings: SettingsPtr;	begin		theSettings := baseSettings[whichSettings];		while theSettings<> nil do			begin				nextSettings := theSettings^.next;				DestroySettingsPtr(whichSettings,theSettings);				theSettings:= nextSettings;			end;	end;{-----------------------------------------------------------------------------}	procedure PutFontNameToFile(theFont: integer);	var ds: str255;	begin		putSpace;		GetFontName(theFont, ds);		PrepareToken(ds, 255);		puttoken(ds);	end;{-----------------------------------------------------------------------------}	procedure PutNumberToFile(dL : longint);	begin		putSpace;		putSingleChar('''');		putToken(StringFromNum(dL));		putSingleChar('''');	end;{-----------------------------------------------------------------------------}	procedure PutStyleToFile(s: Style);	var ds: str255;	begin		putSpace;		putSingleChar('(');		if s= [] then			putToken('normal')		else 			begin				if bold in s then					putToken('bold ');				if italic in s then					putToken('italic ');				if underline in s then					putToken('underline ');				if shadow in s then					putToken('shadow ');				if outline in s then					putToken('outline ');				if condense in s then					putToken('condense ');				if extend in s then					putToken('extend ');			end;		putSingleChar(')');	end;{----------------------------------------------------------------------------}	procedure PutRealToFile(realValue: double; sigDigits: integer);	var ds: str255;	begin		putSpace;		RealTostring(realValue, ds, 100000, sigDigits, true);		putLegalToken(ds);	end;{-----------------------------------------------------------------------------}	procedure PutWindowPositionToFile(theWindow: WindowPtr);	var tempP: WindowPtr;		corner: point;	begin		genericGetPort(tempP);		genericSetPort(theWindow);		corner.v := WindowPortRect(theWindow).top;		corner.h :=WindowPortRect(theWindow).left;		LocalToGlobal(corner);		PutNumberToFile(corner.v);		PutNumberToFile(corner.h);		PutNumberToFile(WindowPortRect(theWindow).bottom);		PutNumberToFile(WindowPortRect(theWindow).right);		genericSetPort(tempP);	end;end.