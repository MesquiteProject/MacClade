unit CSTreeUtil;{еееееееееееееееееееееее}interface	uses		QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, Sound, Dialogs, TextEdit, QuickDrawText,Lists, ToolUtils, Memory, Fonts, Resources, Scrap,  Globals, SetLibInterface, UtilLibInterface,  MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, ErrorUtil, EventUtil, GenUtil, StrUtil, BoxUtil, SymbolsNames, CharUtil, TypeDLOGUtil;	procedure PlaceCRectInAvail (iw: integer);	procedure DisconnectState (ic: integer);	function AlreadyConnected (ic, id: integer): boolean;	function AllConnectedToRoot: Boolean;	procedure WriteNumInRect (iw, shift: integer);	procedure DrawConnection (ip, iq, shift: integer);{еееееееееееееееееееееее}implementation {е$S CSTreeUtil}{----------------------------------------------------------------------------}	procedure PlaceCRectInAvail (iw: integer);		const			nextrow = 12;		var			ballsize, moveleft, movetop: integer;	begin		ballsize := (availR.right - availR.left) div (maxstate + 1) - 2;		if ballsize > 20 then			ballsize := 20;		if (ballsize div 2) * 2 <> ballsize then			ballsize := ballsize - 1;		movetop := topPalette + 5;		if iw < maxstate + 1 then			begin				moveleft := leftPalette + 10 + iw * (2 + ballsize);				if maxstate > nextrow then					if iw > nextrow then						begin							movetop := topPalette + 18;							moveleft := leftPalette + 10 + (iw - nextrow - 1) * (2 + ballsize);						end					else						movetop := topPalette + 2;			end		else			begin				moveleft := 330;				if maxstate > nextrow then					movetop := topPalette + 2;			end;		SetRect(crect[iw], moveleft, movetop, moveleft + ballsize, movetop + ballsize)	end;{----------------------------------------------------------}	procedure DisconnectState; { (ic : integer);}		var			it: integer;	begin		for it := 0 to maxCS do			CurTypeHdl^^.nbors[it] := CurTypeHdl^^.nbors[it] - [ic];		CurTypeHdl^^.nbors[ic] := [];		InPlay[ic] := false;		PlaceCRectInAvail(ic);		if ic >= maxstate + 1 then			if ic = CurTypeHdl^^.maxstar then				CurTypeHdl^^.maxstar := ic - 1;		TypeEdited(curTypeHdl);	end;{----------------------------------------------------------}	function AlreadyConnected; {(ic, id : integer) : boolean;}		var			connected: boolean;		procedure LookForConnection (iat, ifrom: integer);			label				1;			var				ir: integer;		begin			for ir := 0 to maxCS do				begin					if ir in (CurTypeHdl^^.nbors[iat] - [ifrom]) then						begin							if ir = id then								begin									connected := true;									goto 1;								end							else if CurTypeHdl^^.nbors[ir] - [iat] <> [] then								LookForConnection(ir, iat);						end;				end;1:		end;	begin		connected := false;		if ic = id then			connected := true		else			LookForConnection(ic, ic);		AlreadyConnected := connected;	end;{----------------------------------------------------------}	function AllConnectedToRoot; {: boolean;}		var			ir: integer;			ctr, ip: set of 0..maxCS;		procedure GetConToRoot (iat, ifrom: integer);			label				1;			var				ir: integer;				nborsfound: set of 0..maxCS;		begin			nborsfound := [ifrom];			for ir := 0 to maxCS do				if ir in (CurTypeHdl^^.nbors[iat] - [ifrom]) then					begin						ctr := ctr + [ir];						nborsfound := nborsfound + [ir];						if CurTypeHdl^^.nbors[ir] - [iat] <> [] then							GetConToRoot(ir, iat);						if nborsfound = CurTypeHdl^^.nbors[iat] then							goto 1;					end;1:		end;	begin		ctr := [root];		ip := [];		GetConToRoot(root, root);		for ir := 0 to maxCS do			if InPlay[ir] then				ip := ip + [ir];		AllConnectedToRoot := ctr = ip;	end;{----------------------------------------------------------}	procedure WriteNumInRect; { (iw,shift : integer);}		var			rectwidth: integer;	begin		Penmode(patxor);		textmode(srcxor);		OffSetRect(crect[iw], 0, shift);		rectwidth := crect[iw].right - crect[iw].left;		if rectwidth >= 12 then			FrameOval(crect[iw]);		if not printon then			if rectwidth <= 14 then				begin					TextSize(9);					TextFont(kFontIDGeneva);				end			else if rectwidth <= 18 then				begin					Textsize(10);					TextFont(kFontIDGeneva);				end			else				begin					Textsize(12);					TextFont(0);				end;		Moveto((crect[iw].left + crect[iw].right) div 2 - 3, (crect[iw].bottom + crect[iw].top) div 2 + 4);		OffSetRect(crect[iw], 0, -shift);		if iw <= maxstate then			DrawChar(CharOfNum(iw))		else{$IFC FALSE}			begin				TextSize(9);				TextFont(kFontIDGeneva);				DrawString(StringFromNUM(iw));			end;{$ELSEC}		Drawchar('е');{$ENDC}		if not printon then			begin				Textsize(12);				TextFont(0);			end;		PenNormal;		textmode(srcOR);	end;{----------------------------------------------------------}	procedure DrawConnection; {(ip, iq ,shift: integer);}		var			starth, endh, startv, endv, ir, it: integer;	begin		Penmode(patXOR);		textmode(srcXOR);		it := IntegerMax(ip, iq);		ir := IntegerMin(iq, ip);		if (crect[it].top <= crect[ir].top) and (crect[it].right <= crect[ir].left) then			begin				starth := crect[it].right;				startv := (crect[it].top + crect[it].bottom) div 2;				endh := crect[ir].left;				endv := (crect[ir].top + crect[ir].bottom) div 2;			end		else if (crect[it].bottom <= crect[ir].top) and (crect[it].right >= crect[ir].left) then			begin				starth := (crect[it].left + crect[it].right) div 2;				startv := crect[it].bottom;				endh := (crect[ir].left + crect[ir].right) div 2;				endv := crect[ir].top;			end		else if (crect[it].bottom >= crect[ir].top) and (crect[it].left >= crect[ir].right) then			begin				starth := crect[it].left;				startv := (crect[it].top + crect[it].bottom) div 2;				endh := crect[ir].right;				endv := (crect[ir].top + crect[ir].bottom) div 2;			end		else if (crect[it].top >= crect[ir].top) and (crect[it].left <= crect[ir].right) then			begin				starth := (crect[it].left + crect[it].right) div 2;				startv := crect[it].top;				endh := (crect[ir].left + crect[ir].right) div 2;				endv := crect[ir].bottom;			end;		moveto(starth, startv + shift);		lineto(endh, endv + shift);		PenNormal;		textmode(srcOR);	end;end.