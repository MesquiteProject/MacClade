unit TypeImport;{еееееееееееееееееееееее}interface	uses		QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, Sound, Dialogs, TextEdit, QuickDrawText,Lists, ToolUtils, Memory, Fonts, Resources, Scrap,  Globals, SetLibInterface, UtilLibInterface,  SetLibInterface, UtilLibInterface,  MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, ErrorUtil, EventUtil, GenUtil, StrUtil, BoxUtil, TaxonCHUtil, TypeUtil, CharUtil, MenuUtil, ReadWriteUtil, ReadUtil, ReadAssumpBlock;	procedure LoadTypes;{еееееееееееееееееееееее}implementation {е$S TypeImport}{----------------------------------------------------------------------------}	procedure LoadTypes;		label			1, 2, 3;		var			typeList: OSType;			typnum: integer;			chdl: charshandle;			anyfound, alreadywarned, replace: boolean;			ds: str255;			thp: typeHdlPtr;			theFile: str255;			localItemHit: integer;			format: integer;			success: boolean;			FileSpec: FSSpec;				begin		badtypeRead := false;		typeList := 'TEXT';		if ChooseFile(1, @typeList, nil, theFile, FileSpec,false,false,false) then			if EqualFileSpecs(FileSpec,FDI^[dataFileFDI].fs) then  				InstantError(159)			else				begin					SetCursor(clockCursor);					fpos := kInitialReadPos;					FDI^[readFileFDI].fs:= FileSpec;					ioFileFDI := readFileFDI;					ds := MakeCaps(GetFileToken(maxtok));					if ds <> '#NEXUS' then						begin							InstantError(288);							goto 2;						end;					anyfound := false;					alreadywarned := false;					replace := true;					if FindBlock('ASSUMPTION','ASSUMPTIONS') & (fpos < mcFileLength) then						repeat							ds := MakeCaps(GetFileToken(maxtok));							if (ds = 'USERTYPE') then								begin									ds := GetFileToken(maxtok);	   {gets name of type}									anyfound := true;									if not alreadywarned then										if (gettypnum(ds) <> 0) then											begin												alreadywarned := true;												Paramtext('Replace types of same name?', '', '', '');												localItemHit := DoAlert(342, CautionA);												if localItemHit = 3 then													goto 2												else if localItemHit = 2 then													replace := false;											end;								end							else if EndOfBlock(ds) then								goto 1;						until false;1:					if not anyfound then						InstantError(160)					else						begin							fpos := kInitialReadPos;  {was 0}							if FindBlock('ASSUMPTION','ASSUMPTIONS') & (fpos < mcFileLength) then3:							repeat								ds := MakeCaps(GetFileToken(maxtok));								if (ds = 'USERTYPE') and (numtypes < maxtypes) and not badtypeRead then									begin										ds := GetFileToken(maxtok);	   {gets name of type}										if ds = '*' then			{somebody has * the usertype - ignore *}											ds := GetFileToken(maxtok);										if alreadywarned then  {there are duplicate type names}											begin												typnum := gettypnum(ds);												if (typnum <> 0) then  {we've found one of the dups}													begin														if replace then   {replace dup}															begin																thp := typeHdlPtr(GetMaster(typeCHUNKs) + HdlSize * (typnum - 1));																typeHdl := thp^;																ds := MakeCaps(GetFileToken(maxtok)); {this is either a format token, a (, or and =}																if ds = '(' then   {v3.05:   there is more than one token}																	repeat																		ds := MakeCaps(GetFileToken(maxtok));																		if ds <> ')' then																			ProcessUserTypeFormatToken(ds, success, format);																	until not success or (ds = ')') or (fpos >= mcFileLength)																else																	ProcessUserTypeFormatToken(ds, success, format);																if not success then																	begin																		Skipper([';'], true);																		goto 3;																	end;																ProcessUserType(format, ds, typeHdl, typnum);															end														else															Skipper([';'], true);													end												else													ReadUserType(ds);											end										else											ReadUserType(ds);									end								else if EndOfBlock(ds) then									begin										ReBuildAssumpMenu;										goto 2;									end;							until false;						end;2:					SetCursorToArrow;				end;	end;end.