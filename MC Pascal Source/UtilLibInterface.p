unit UtilLibInterface;interface	uses		quickdraw, Types, Events, QuickDrawText, OSUtils, TextUtils, Windows, Sound,		FP, Dialogs, TextEdit, Lists, ToolUtils, Memory, Fonts, Resources, Scrap, 		Globals;	procedure ZeroBlockWords (p: univ ptr; numWords: longint);	procedure ZeroBlockLongwords (p: univ ptr; numlongs: longint);	procedure GetNodeTokenC (descPP: ptr; token: ptr;  punctuation: ptr; var branchlength: Double; var hasbranchlength: boolean);		function RandomPosLong (var seed: longint): Longint;	function RandomInteger (var seed: longint): integer;	function truncateDouble (x : double): longint;	function chariswhite (ccL: char): boolean;	function ComparePointers (ctypP: ptr; mustbeidentical, respectcase, examineexcluded: boolean; numbytes: integer; src, dest: Ptr; numchars,numMisMatches: integer): boolean;//	function ComparePointersFlexible (ctypP: ptr; mustbeidentical, respectcase, examineexcluded,ignoreBlock2Gaps: boolean; numMismatches, numbytes: integer; src, dest: Ptr;block1NumChars, block2NumChars: integer): boolean;	procedure SetToCellString (miss, gap, uncert, poly: char; symb, dest, statenames: ptr; setc: largestsetchars);	function StringsEqual (st1, st2: ptr; siglen: integer): boolean;	procedure ConcatStringChar (s: ptr; ch: char);	procedure sectHandles (src, dest: ptr; numbytes: longint);	procedure UnionHandles (src, dest: ptr; numbytes: longint);	function CharAtPointer (p: ptr): char;	function charinstringC (ch: char; s: ptr): boolean;	function ComparestringC (st1, st2: ptr): boolean;	function lowWord (a: longint): integer;	function highWord (a: longint): integer;	function multaddC (a, b, c: longint): longint;	procedure RotateBits (srcMap: BitMap; var destMap: BitMap);	procedure ExpandCHBlock (dest, source: ptr; numchars: integer);	procedure ContractCHBlock (newmaxstate: integer; dest, source: ptr; numchars: integer);	function HasFileIDFunctions(yourVRef: integer): boolean;implementation	procedure dummy;	begin	end;	function lowWord (a: longint): integer;	external;	function highWord (a: longint): integer;	external;		function multaddC (a, b, c: longint): longint;	external;   {multiplies b & c and adds to a, returning result as function; negative returned if overflow}	function RandomPosLong (var seed: longint): Longint;	external;	function RandomInteger (var seed: longint): integer;	external;	function truncateDouble (x : double): longint;	external;	function chariswhite (ccL: char): boolean;	external;	function ComparePointers (ctypP: ptr; mustbeidentical, respectcase, examineexcluded: boolean; numbytes: integer; src, dest: Ptr; numchars,numMisMatches: integer): boolean;	EXTERNAL;//	function ComparePointersFlexible (ctypP: ptr; mustbeidentical, respectcase, examineexcluded,ignoreBlock2Gaps: boolean; numMismatches, numbytes: integer; src, dest: Ptr; block1NumChars, block2NumChars: integer): boolean;//	EXTERNAL;	procedure ZeroBlockWords (p: univ ptr; numWords: longint);	EXTERNAL;	procedure ZeroBlockLongwords (p: univ ptr; numlongs: longint);	EXTERNAL;	procedure GetNodeTokenC (descPP: ptr; token: ptr;  punctuation: ptr; var branchlength: Double; var hasbranchlength: boolean);	EXTERNAL;	procedure SetToCellString (miss, gap, uncert, poly: char; symb, dest, statenames: ptr; setc: largestsetchars);	external; {note: var to avoid problems passing set to C}	function charinstringC (ch: char; s: ptr): boolean;	external;	function ComparestringC (st1, st2: ptr): boolean;	external;	function StringsEqual (st1, st2: ptr; siglen: integer): boolean;	external;	procedure ConcatStringChar (s: ptr; ch: char);	EXTERNAL;	procedure sectHandles (src, dest: ptr; numbytes: longint);	EXTERNAL;	procedure UnionHandles (src, dest: ptr; numbytes: longint);	EXTERNAL;	function CharAtPointer (p: ptr): char;	EXTERNAL; {   var tc: integer;begin tc := p^; if tc < 0 then tc := tc + 256; CharAtPointer := char(tc);end;}		procedure RotateBits (srcMap: BitMap; var destMap: BitMap);	EXTERNAL;	procedure ExpandCHBlock (dest, source: ptr; numchars: integer);	external;	procedure contractCHBlock (newmaxstate: integer; dest, source: ptr; numchars: integer);	external;		function HasFileIDFunctions(yourVRef: integer): boolean;	external;end.