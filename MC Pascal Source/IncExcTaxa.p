unit IncExcTaxa;{еееееееееееееееееееееее}interface	uses		QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, Sound, Dialogs, 		TextEdit, QuickDrawText,Lists, ToolUtils, Memory, Fonts, Resources, Scrap,  		Globals, SetLibInterface, UtilLibInterface,  MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, 		ErrorUtil, EventUtil, GenUtil, StrUtil, BoxUtil, TaxonCHUtil, TreeUtil, 		CharUtil, MenuUtil, TreeMakerUtil, LinkUtil, InfoWindows, RowColumn;	procedure IncAllTaxa;	procedure IncNewTaxa;	procedure IncludeExcludeInfoSelTaxa (todo: integer);{	procedure IncExcTaxa;}{еееееееееееееееееееееее}implementation {е$S IncExcTaxa}{-----------------------------------------------------------------------------}	procedure IncAllTaxa;		var			it: integer;	begin		StoreOldTreeForUndo;  {undotype set in IncExcChangePosting}		for it := 1 to numtaxa do			if gettaxonhdl(it)^^.deleted then				AddTaxon(it, R);		EmptyAssociatedTreeHandles;		IncExcChangePosting(true);		InvalidateWindow(twmesswindow, true);	end;{-----------------------------------------------------------------------------}	procedure IncNewTaxa;		var			TaxonHdl: thdl;			it: integer;	begin		StoreOldTreeForUndo;  {undotype set in IncExcChangePosting}		for it := 1 to numtaxa do			begin				TaxonHdl := gettaxonhdl(it);				if taxonHdl^^.deleted & taxonHdl^^.newTaxon then					AddTaxon(it, R);			end;		EmptyAssociatedTreeHandles;		IncExcChangePosting(true);		InvalidateWindow(twmesswindow, true);	end;{-----------------------------------------------------------------------------}	procedure IncludeExcludeInfoSelTaxa (todo: integer);		var			j: integer;			tN: NPtr;			numExcluded: longint;			willchange, dotaxa: boolean;	begin		doTaxa := ((frontwindow = infoWindow[taxinfo]) & infoSomeSelected[taxinfo]);		if doTaxa & (todo > 0) & treeopen then			begin				willchange := false;				for j := 1 to numtaxa do  {check to see if anything will change}					if InfoRowSelected(taxinfo, j) then						if ((todo = IncludeItem) & not TaxonInTree(j)) | ((todo = ExcludeItem) & TaxonInTree(j)) | (todo = SwitchItem) then							begin								willchange := true;								leave;							end;				numExcluded := 0;				for j := 1 to numtaxa do  {check to see if anything will change}					if not InfoRowSelected(taxinfo, j) & not TaxonInTree(j) then						numExcluded := numExcluded+1					else if InfoRowSelected(taxinfo, j) then						if  ((todo = SwitchItem) & TaxonInTree(j)) | (todo = ExcludeItem) then							numExcluded := numExcluded+1;				if (numtaxa-numExcluded)<3 then					NewError(448,0)				else if willchange then					begin						StoreOldTreeForUndo;						for j := 1 to numtaxa do							if InfoRowSelected(taxinfo, j) then								begin									if ((todo = IncludeItem) | (todo = SwitchItem)) & not TaxonInTree(j) then										begin											AddTaxon(j, R);											InvalidateInfoRow(taxinfo, j, j);										end									else if ((todo = ExcludeItem) | (todo = SwitchItem)) & TaxonInTree(j) then										begin											NPtrOfTaxon(j, tn);											if tn <> nil then												ExciseTaxonFromCurrentTree(tn);											InvalidateInfoRow(taxinfo, j, j);										end;								end;						EmptyAssociatedTreeHandles;						IncExcChangePosting(true);					end;			end;	end;end.