unit MCFonts;{еееееееееееееееееееееее}interface	uses		QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, 		Sound, Dialogs, TextEdit, QuickDrawText,Lists, ToolUtils, Memory, Fonts,		 Resources, Scrap,  Globals, SetLibInterface, UtilLibInterface,  MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, ErrorUtil, EventUtil, GenUtil, 		 StrUtil, MenuUtil, BoxUtil, SpreadUtil, TaxonCHUtil, InfoWindows, StatesWindowUtil,		 EditorGeneralUtil, ChartWindow, TextWindows;	procedure UpdateWindowsAfterFontChange;	procedure DoSizeMenu (theSizeMHdl: MenuHandle; ItemNo: integer; var thesize: integer);	procedure DoStyleMenu (theStyleMHdl: MenuHandle; ItemNo: integer; var thestyle: style);	procedure DoFontMenu (theFontMHdl: MenuHandle; ItemNo: integer; var thefont: integer);	function GetMenuItemNumber (whichPop: integer): integer;	procedure MouseInPopUps (theMHdl: MenuHandle; theMenu: integer; poprect: rect; whichPop: integer; var fonts: fontSet);	procedure DrawPopUps (whichpop: integer; fonts: fontSet);	procedure FixLaserFontMenus (fonts: fontSet);	procedure ChooseFontUser (theDialog: DialogPtr; itemNo: INTEGER);	function ChooseFontFilter (theDialog: DialogPtr; var Event: EventRecord; var localItemHit: INTEGER): BOOLEAN;	const		popFont = 1;		popStyle = 2;		popSize = 3;	var		FontFontBox, FontSizeBox, FontFaceBox: rect;		dlogFonts: fontSet;		FontPopUpHandle, SizePopUpHandle, StylePopUpHandle: ControlHandle;{еееееееееееееееееееееее}implementation {е$S Fonts}{-----------------------------------------------------------------------------}	procedure UpdateWindowsAfterFontChange;		var			B: rect;			whichinfo, whichText: integer;	begin		if IsEditorWindow(frontwindow) then			begin				AdjustFonts;				EraseREct(editorBoundaryRect);				ReSizeEditorWindow;			end		else if IsTreeWindow(frontwindow) then			begin				SetControlValueLong(vTWScroll, GetControlMinimumLong(vTWScroll));				SetControlValueLong(hTWScroll, GetControlMinimumLong(hTWScroll));{$IFC FLIPTREE}				if treeflipped then					begin						TWOrigin.v := GetControlValueLong(hTWScroll);						TWOrigin.h := GetControlValueLong(vTWScroll);					end				else					begin						TWOrigin.v := GetControlValueLong(vTWScroll);						TWOrigin.h := GetControlValueLong(hTWScroll);					end;{$ELSEC}				TWOrigin.v := GetControlValueLong(vTWScroll);				TWOrigin.h := GetControlValueLong(hTWScroll);{$ENDC}				InvalidateWindow(treewindow, true);			end		else if IsInfoWindow(frontwindow) then			begin				whichInfo := WhichInfoWindow(frontwindow);				infoDirtyNames[whichinfo] := true;				infoTE[whichinfo]^^.txFont := infoFont[whichinfo];				infoTE[whichinfo]^^.txSize := infoFontSize[whichinfo];				infoTE[whichinfo]^^.txFace := infoStyle[whichinfo];				SizeInfoWindow(whichinfo, true, true);			end		else if (frontWindow = stateswindow) then			begin				statesTE^^.txFont := statesFont;				statesTE^^.txSize := statesFontSize;				SizeStatesWindow;				InvalidateWindow(statesWindow, true);			end		else if (frontwindow=chartwindow) then			begin				genericSetPort(chartWindow);				Textsize(CWfontsize);				TextFont(CWfont);				TextFace(CWstyle);				CalcCWBoxes(WindowPortRect(chartWindow));				ReDrawChartWindow;			end		else if IsTextWindow(frontWindow) then			begin				whichText := WhichTextWindow(frontWindow);				textWindowInfo[whichText]^.TE^^.txFont := textWindowInfo[whichText]^.font;				textWindowInfo[whichText]^.TE^^.txSize := textWindowInfo[whichText]^.size;				SizeTextWindowText(whichText, true, true, true);				InvalidateWindow(textWindow[whichText],true);			end;	end;{-----------------------------------------------------------------------------}	procedure DoSizeMenu (theSizeMHdl: MenuHandle; ItemNo: integer; var thesize: integer);		var			TD: DialogPtr;			oldsize: integer;			tempP: WindowPtr;			localItemHit: integer;	begin		oldsize := thesize;		case ItemNo of			S8Item: 				thesize := 8;			S9Item: 				thesize := 9;			S10Item: 				thesize := 10;			S12Item: 				thesize := 12;			S14Item: 				thesize := 14;			S18Item: 				thesize := 18;			SOtherItem: 				begin					StartDLOG(349, TD, tempP);					SetDLOGText(TD, 3, StringFromNum(thesize), true);					myShowDialog(TD);					FrameButton(TD, 1);					repeat						ModalDialog(nil, localItemHit);						if localItemHit = 1 then							begin								thesize := EditTextInt(TD, 3,true);								if (thesize <= 0) or (thesize > 127) then									begin										if (thesize <= 0) then											Beep										else if (thesize > 127) then											InstantError(191);										thesize := oldsize;									end;							end;					until localItemHit in [1, 2];					EndDLOG(TD, tempP);				end;			otherwise				;		end;		if updateFontChangedWindows & (thesize <> oldsize) then			UpdateWindowsAfterFontChange;		FixSizeMenu(theSizeMHdl,thesize);	end;{-----------------------------------------------------------------------------}	procedure DoStyleMenu(theStyleMHdl: MenuHandle; ItemNo: integer; var thestyle: style);	begin		case ItemNo of			PlainItem: 				thestyle := [];			ItalicItem: 				if italic in thestyle then					thestyle := thestyle - [italic]				else					thestyle := thestyle + [italic];			BoldItem: 				if bold in thestyle then					thestyle := thestyle - [bold]				else					thestyle := thestyle + [bold];			UnderlineItem: 				if underline in thestyle then					thestyle := thestyle - [underline]				else					thestyle := thestyle + [underline];			ShadowItem: 				if shadow in thestyle then					thestyle := thestyle - [shadow]				else					thestyle := thestyle + [shadow];			OutlineItem: 				if outline in thestyle then					thestyle := thestyle - [outline]				else					thestyle := thestyle + [outline];			CondenseItem: 				if condense in thestyle then					thestyle := thestyle - [condense]				else					thestyle := thestyle + [condense];			ExtendItem: 				if extend in thestyle then					thestyle := thestyle - [extend]				else					thestyle := thestyle + [extend];			otherwise				;		end;		FixStyleMenu(theStyleMHdl,thestyle);	end;{-----------------------------------------------------------------------------}	procedure DoFontMenu (theFontMHdl: MenuHandle; ItemNo: integer; var thefont: integer);		var			oldfont: integer;			ds: str255;			j: integer;			c: char;	begin		oldfont := thefont;		GetMenuItemText(theFontMHdl, ItemNo, ds);		GetFNum(ds, thefont);		j := 1;		repeat			GetItemMark(theFontMHdl, j, c);			if c = char($12) then				myCheckMenuItem(theFontMHdl, j, false);			j := j + 1;		until (c = char($12)) or (j > myCountMenuItems(theFontMHdl));		myCheckMenuItem(theFontMHdl, ItemNo, true);		FixFontMenu(theFontMHdl,thefont, true);		if (oldfont <> thefont) & updateFontChangedWindows then			UpdateWindowsAfterFontChange;	end;{-----------------------------------------------------------------------------}	function GetMenuItemNumber (whichPop: integer): integer;		var			c: char;			j: integer;			foundchecked: boolean;			theMHdl: MenuHandle;	begin		foundchecked := false;		case whichpop of			popFont: 				theMHdl := dlogFontMHdl;			popstyle: 				theMHdl := dlogStyleMHdl;			popsize: 				theMHdl := dlogSizeMHdl;			otherwise				begin					GetMenuItemNumber := 1;					Exit(GetMenuItemNumber);				end;		end;		j := 1;		repeat			GetItemMark(theMHdl, j, c);			if c = char($12) then				begin					foundchecked := true;					leave;				end;			j := j + 1;		until (j > myCountMenuItems(theMHdl));		if foundchecked then			GetMenuItemNumber := j		else			GetMenuItemNumber := 1;	end;{----------------------------------------------------------------------------}	procedure MouseInPopUps (theMHdl: MenuHandle; theMenu: integer; poprect: rect; whichPop: integer; var fonts: fontSet);		var			spot: point;			menucode: longint;			ItemNo: integer;	begin{InsertMenu(theMHdl, -1);}		spot.v := poprect.top;		spot.h := poprect.left;		LocalToGlobal(spot);		menucode := PopUpMenuSelect(theMHdl, spot.v, spot.h, GetMenuItemNumber(whichpop));		ItemNo := LowWord(menucode);		if ItemNo > 0 then			with fonts do				case whichpop of					popfont: 						DoFontMenu(theMHdl, ItemNo, font);					popsize: 						DoSizeMenu(theMHdl, ItemNo, size);					popstyle: 						DoStyleMenu(theMHdl, ItemNo, face);					otherwise						;				end;{    DeleteMenu(theMenu);}		DrawPopUps(whichPop, fonts);	end;{-----------------------------------------------------------------------------}	procedure DrawPopUps (whichpop: integer; fonts: fontSet);		var			ds: str255;	begin		with fonts do			begin				case whichpop of					popFont: 						begin							GetFontName(font, ds);							DrawPopUpRect(FontFontBox, ds);						end;					popstyle: 						begin							GetMenuItemText(StyleMHdl, GetMenuItemNumber(popstyle), ds);							DrawPopUpRect(FontFaceBox, ds);						end;					popsize: 						begin							NumToString(size, ds);							DrawPopUpRect(FontSizeBox, ds);						end;					otherwise						;				end;			end;	end;{-----------------------------------------------------------------------------}	procedure FixLaserFontMenus (fonts: fontSet);	begin		with fonts do			begin{InsertMenu(FontMHdl, -1);}				FixFontMenu(dlogFontMHdl,font, true);{DeleteMenu(FontMenu);}{InsertMenu(SizeMHdl, -1);}				FixSizeMenu(dlogSizeMHdl,size);{DeleteMenu(SizeMenu);}{InsertMenu(StyleMHdl, -1);}				FixStyleMenu(dlogStyleMHdl,face);{DeleteMenu(StyleMenu);}			end;	end;{-----------------------------------------------------------------------------}	procedure ChooseFontUser (theDialog: DialogPtr; itemNo: INTEGER);	begin		FrameButton(theDialog, 1);		DrawPopUps(1, dlogFonts);		DrawPopUps(2, dlogFonts);		DrawPopUps(3, dlogFonts);	end;{-----------------------------------------------------------------------------}	function ChooseFontFilter (theDialog: DialogPtr; var Event: EventRecord; var localItemHit: INTEGER): BOOLEAN;	begin		genericSetPort(myGetWindowPtrForDialog(theDialog));		ChooseFontFilter := FALSE;		GlobalToLocal(Event.where);		if (Event.what = keyDown) and HitReturn(Event) then			begin				localItemHit := PressButton(theDialog, 1);				ChooseFontFilter := true;			end;		if (Event.what = mouseDown) then			begin				if PtInRect(Event.where, FontFontBox) then					begin						MouseInPopUps(dlogFontMHdl, dlogFontMenu, FontFontBox, popFont, dlogFonts);						ChooseFontFilter := TRUE;					end				else if PtInRect(Event.where, FontSizeBox) then					begin						StyleMHdl := GetMenuHandle(StyleMenu);						myEnableItem(dlogSizeMHdl, 0);   						MouseInPopUps(dlogSizeMHdl, dlogSizeMenu, FontSizeBox, popSize, dlogFonts);						ChooseFontFilter := TRUE;					end				else if PtInRect(Event.where, FontFaceBox) then					begin						MouseInPopUps(dlogStyleMHdl, dlogStyleMenu, FontFaceBox, popStyle, dlogFonts);						ChooseFontFilter := TRUE;					end;				localItemHit := NotInDialog;			end;		LocaltoGlobal(Event.where);	end;end.