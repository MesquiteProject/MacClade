unit ChartWTable;{еееееееееееееееееееееее}interface	uses		QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, Sound, Dialogs, TextEdit, QuickDrawText,Lists, ToolUtils, Memory, Fonts, Resources, Scrap,  Globals, SetLibInterface, UtilLibInterface,  MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, ErrorUtil, EventUtil, GenUtil, BoxUtil, CharUtil, StrUtil, MenuUtil, TreeUtil, SymbolsNames, TaxonCHUtil, ChartWUtil;	function BiggestSpotToShow: integer;	procedure ReportNoChanges;	procedure CWTableTitle;	procedure CWTableLine (j: integer);	procedure DrawTable (boundary: rect);	procedure DrawScrollableTable;{еееееееееееееееееееееее}implementation {е$S ChartWTable}	const		CWTableLeft = 30;		CWTableRight = 30;	var		valuetitlemid, cattitlemid, valueleft: longint;{-----------------------------------------------------------------------------}	function BiggestSpotToShow: integer;	begin		if (BiggestSpot = BiggestMaxMax) and minmaxon then			BiggestSpotToShow := MaximumChartMatrix(CMmaxmax)		else if BiggestSpot = BiggestAuto then			BiggestSpotToShow := MaximumChartMatrix(MaxSpotBarKind)		else			BiggestSpotToShow := BiggestSpot;	end;{-----------------------------------------------------------------------------}	procedure ReportNoChanges;	begin		MoveTo(50, 50);		case chartchangesmode of			meanmode, minmaxmode: 				DrawString('No changes.');			unambigmode: 				DrawString('No unambiguous changes.');			otherwise				;		end;		emptychart := true;	end;{-----------------------------------------------------------------------------}	procedure DrawTableBoxes (numhor, numver: integer; centerRect: Rect; var box: rect; labelwithstates, fillwithdata: boolean);		var			verboxW, horboxW, j, isfrom, isto, numtoshow, whichkind: integer;			theInfo: FontInfo;			c: char;			ds, ds2, dshyphen: str255;			rowtotal: longint;			settoshow: set15;			divide: double;			cellbox: rect;			lf, baseBuf, adjust: integer;	begin		with box do			begin				verboxW := (bottom - top) div numver;				horboxW := (right - left) div numhor;				left := centerRect.left + (centerRect.right - centerRect.left - numhor * horboxW) div 2;				right := left + numhor * horboxW;				top := centerRect.top + (centerRect.bottom - centerRect.top - numver * verboxW) div 2;				bottom := top + numver * verboxW;				GetFontInfo(theInfo);				adjust := (verboxW - (theinfo.ascent + theinfo.descent) * 3) div 2;				settoshow := SpotBarSetToShow;				numtoshow := NumSpotBar(settoshow);				for j := 1 to numhor - 1 do					begin						moveto(left + horboxW * j, top);						GridLineTo(left + horboxW * j, bottom, false);					end;				for j := 1 to numver - 1 do					begin						moveto(left, top + verboxW * j);						GridLineTo(right, top + verboxW * j, false);					end;				right := right + 2;				bottom := bottom + 2;				FrameShadowRect(box);				right := right - 2;				bottom := bottom - 2;				if labelwithstates then					begin						moveto(left - StringWidth('From: 0 '), top + 5);						DrawString('From:');						moveto(left, top - 5 - FontHeight);						DrawString('To:');						for j := 0 to numhor - 1 do							begin								c := CharOfNum(j);								moveto(left + horboxW * j + (horboxW - CharWidth(c)) div 2, top - 5);								DrawChar(c);							end;						for j := 0 to numver - 1 do							begin								c := CharOfNum(j);								moveto(left - CharWidth(c) - 4, top + verboxW * j + verboxW div 2 + 4);								DrawChar(c);							end;					end;				if fillwithdata then					begin						for isfrom := 0 to numver - 1 do							for isto := 0 to numhor - 1 do								begin									if CWPercent then   {note - can only do percent if numtoshow = 1, }											{which only occurs for currenttree and not min max mode}										begin											if CWNormRows then												begin													rowtotal := 0;													for j := 0 to numhor - 1 do														rowtotal := rowtotal + ChartMatrixData[CMstandard]^[isfrom][j];													if rowtotal = 0 then														ds := '0.0'													else														RealToString(1.0 * ChartMatrixData[CMstandard]^[isfrom][isto] / rowtotal, ds, 1000, 3, true);{>>>>>>>>>>>>>>>>}												end											else if totalChartMatrix = 0 then												ds := '0'											else												RealToString(1.0 * ChartMatrixData[CMstandard]^[isfrom][isto] / totalChartMatrix, ds, 1000, 3, true);{>>>>>>>>>>>>>>>>}											dshyphen := ds;										end									else										dsHyphen := CMAllValuesString(isfrom, isto, ds);									if CWShowconstant or (isfrom <> isto) then										begin											lf := left + horboxW * isto;											baseBuf := top + verboxW * isfrom;											SetRect(cellbox, lf, baseBuf, lf + horboxW, baseBuf + verboxW);											InsetRect(cellbox, 1, 1);											ClipRect(cellbox);											if (StringWidth(dshyphen) < horboxW - 2) or (numtoshow = 1) then												begin													moveto(lf + (horboxW - StringWidth(dshyphen)) div 2, baseBuf + verboxW div 2 + 4);													DrawString(dshyphen);												end											else												begin													InsetRect(cellbox, 0, adjust);													TETextBox(Pointer(ord4(@ds) + 1), length(ds), cellbox, teJustCenter);												end;											ClipRect(box);										end;								end;					end;			end;		ClipRect(WindowPortRect(chartWindow));	end;{-----------------------------------------------------------------------------}	function CWTableHeight (ic: integer): integer;	begin		CWTableHeight := CWTableBox.top + CWLW * (ic - CWTAbletop + 1) - 2;	end;{-----------------------------------------------------------------------------}	procedure CWTableLine (j: integer);		var			height: integer;			box: rect;			realvalue: double;			ds: str255;	begin		Height := CWTableHeight(j);		with CWTableBox do			begin{====== category info ======}				if CIRICategory then					ds := CategoryString(j, 4, true, false)				else					ds := CategoryString(j, 0, true, false);				moveto(cattitlemid - Stringwidth('000') div 2, height - 2);				DrawString(ds);{====== value ======}				ds := CLAllValuesString(j);				moveto(valuetitlemid - StringWidth(ds) div 2, height - 2);				DrawString(ds);				moveto(Left, height);{PenPat(QDltGray);}				GridLineTo(right - 1, height, false);				PenNormal;			end;	end;{-----------------------------------------------------------------------------}	procedure CWTableTitle;		var			ds: str255;			box: rect;	begin		with CWTableBox do			begin				PenNormal;				TextFace(CWStyle + [Bold]);				SetChartTitleClip;				ds := CategoryTitle;				CatTitlemid := left + valueleft div 2;				moveTo(cattitlemid - Stringwidth(ds) div 2, top - 4);				DrawString(ds);{$IFC TRUE}				if CWPercent then					ds := 'Frequency (%)'				else if (CWChart = CWCSteps) and (sequencechart or positionchart) then					ds := StepsChartUnits(CWStepsShow, true)				else if CWChart = CWCC2T then					ds := concat(LinkNameFromChain(treechain, twotrees[0]), ' - ', LinkNameFromChain(treechain,twotrees[1]))				else if CWChart = CWCC2TF then					ds := concat(extratreefilename[1]^^, ' - ', extratreefilename[2]^^)				else if CWChart = CWCProbSteps then					ds := 'Probability'				else					ds := 'Number';{$ENDC}				ValueTitlemid := left + valueleft + (right - valueleft) div 2;				moveTo(valuetitlemid - Stringwidth(ds) div 2, top - 4);				DrawString(ds);				TextFace(CWStyle);			end;	end;{-----------------------------------------------------------------------------}	procedure DrawTableFooter;		var			numtoshow, j, posH, posV: integer;			settoshow: set15;			ds: str255;	begin		settoshow := SpotBarSetToShow;		numtoshow := NumSpotBar(settoshow);		if numtoshow > 1 then			begin				posH := CWTableBox.right;				posV := CWTableBox.bottom + FontHeight + 8;				MoveTo(posH, posV);				for j := numtoshow downto 1 do					begin						ds := SpotBarName(GetSpotBarKind(SetToShow, j), false);						posH := posH - StringWidth(ds);						MoveTo(posH, posV);						DrawString(ds);						if (j > 1) then							if (CWChart = CWCSteps) & not sequencechart & not positionchart then								begin									posH := posH - StringWidth(',  ');									MoveTo(posH, posV);									DrawString(',  ');								end							else								begin									posH := posH - StringWidth('  -  ');									MoveTo(posH, posV);									DrawString('  -  ');								end;					end;			end;	end;{-----------------------------------------------------------------------------}	procedure DrawScrollableTable;		var			ir, ic: INTEGER;			tport: WindowPtr;			oldClip: RgnHandle;	begin		oldClip := NewRgn;		genericGetPort(tport);		GetClip(oldClip);		InsetREct(CWTableBox, -2, -2);		PenSize(2, 2);		FrameRect(CWTableBox);		PenSize(1, 1);		InsetREct(CWTableBox, 2, 2);		valueleft := (CWTableBox.right - CWTableBox.left) div 2;		valueleft := IntegerMax(StringWidth(CategoryTitle) + 10, valueleft);		CWTableTitle;		ir := 1;		ic := CWTableTop;		repeat			CWTableLine(ic);			ir := ir + 1;			ic := ic + 1;		until (ir > CWTablerows) or (ic >= numIntervals[CLkind]);		DrawTableFooter;		SetClip(oldClip);		ZapRegion(oldClip);		genericSetPort(tport);	end;{-----------------------------------------------------------------------------}	procedure DrawTable (boundary: rect);		var			ds: str255;			box: rect;			topstart, leftstart: integer;			mincatvalue, maxcatvalue: longint;	begin		SetMenuItemText(FileMHdl, PrintingItem, 'Print Table...');		case CWChart of			CWCStates, CWCSteps, CWCCTall, CWCC2T, CWCC2TF, CWCcst, CWCProbSteps:   {DRM CST}				begin					DrawScrollableTable;					CalcMinMaxCatValues(mincatvalue, maxcatvalue);				end;			CWCChanges: 				if BiggestSpotToShow > 0 then					begin						box := boundary;						Insetrect(box, 40 + StringWidth('From: 0 ') div 2, 40);						OffSetRect(box, StringWidth('From: 0 ') div 2, 0);						box.top := box.top + 5 + 3 * FontHeight + ChartImageTitleHeight;						DrawTableBoxes(maxChartMatrixCat + 1, maxChartMatrixCat + 1, boundary, box, true, true);{    if showChartTitle then DrawChartImageTitle;}{$IFC FALSE}						settoshow := SpotBarSetToShow;						numtoshow := NumSpotBar(settoshow);						if Chartchangesmode = unambigmode then							DrawString('Frequency of unambiguous changes between states')						else							DrawString('Frequency of possible changes between states');						if numtoshow > 1 then							begin								MoveTo(50, 20 + FontHeight);								DrawString('(');								for j := 1 to numtoshow do									begin										if j > 1 then											DrawString(' - ');										DrawString(SpotBarName(GetSpotBarKind(SetToShow, j), false));									end;								DrawString(')');							end;{$ENDC}					end				else					ReportNoChanges;			otherwise				;		end;	end;{-----------------------------------------------------------------------------}end.