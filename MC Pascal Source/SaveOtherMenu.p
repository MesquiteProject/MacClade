unit SaveOtherMenu;{еееееееееееееееееееееее}interface	uses		Printing, QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, 		Sound, Dialogs, TextEdit, QuickDrawText,Lists, ToolUtils, Memory, Fonts, Resources, 		Scrap,  Globals, SetLibInterface, UtilLibInterface,  Traps, Balloons, MemoryUtil,		CarbonUtil, SimpleUtil, WindowUtil, ErrorUtil, EventUtil, GenUtil, AppleTalk, PPCToolBox, 		Processes, Notification, EPPC, AppleEvents, TaxonCHUtil, BranchListWindow, 		ChartWWrite, StrUtil, TreeUtil, ImpForeignFiles, TypeUtil, WriteDataUtil,		CharUtil, LaserTree, EditUtilMenu, WriteUtil, PICT, ClickInInfoWindow, 		SpreadUtil, LinkUtil, Export, ChartMenu, ChartWindow, StatsMenu, TreeMaker, 		Windows, Fonts, PrintingUtil, PrintingMisc, DoPrint, WriteData, GenCloseFile, GenOpenFile, 		TreeMenu, TraceMenu, EditMenu, DisplayMenu, Settings, BoxUtil, 		About, Equivocal, ChartWWrite, StatusNotes, InfoWindows, ChartWText,		TextWindows;	procedure DoSaveOtherMenu (ItemNo: integer);{еееееееееееееееееееееее}implementation {е$S SaveOtherMenu}{----------------------------------------------------------------------------}	procedure InfoWindowToText(whichinfo: integer);		var			ic: integer;			oldCharInfoExpon: boolean;	begin		oldCharInfoExpon := CharInfoExpon;		CharInfoExpon := WriteExpon;		DrawInfoTitle(whichinfo, 0, 0, true);		for ic := 1 to MaximumInfoRows(whichinfo) do			DrawInfoLine(whichinfo, ic, 0, true);		CharInfoExpon := oldCharInfoExpon;		if infoOpen[whichinfo] then			InvalidateWindow(infoWindow[whichinfo], true);	end;{----------------------------------------------------------------------------}	procedure NodeListsToText;		var			dI: longint;			nodenum: integer;	begin		dI := 0;		DrawNodeListHeading(dI, dI);		for nodenum := 1 to (2 * numtaxain) - 1 do  {v4: use totalnodes instead in case there are polytomies}			if BranchExists(NodeOfNumber(nodenum)) then				DrawNodeInfo(NodeOfNumber(nodenum), nodenum, dI, dI, dI, dI);	end;{----------------------------------------------------------------------------}	procedure CharListsToText;		var			ic,ir: integer;			ds: str255;	begin		for ic := 1 to numchars do			begin				DrawWriteString(StringFromNum(ic));				DrawWriteString('. ');				ds := AvailCharName(ic);				DrawWriteStringLn(ds);				if not molecular then					for ir := 0 to maxstate do						if CharStateName(ic, ir) <> '' then							DrawWriteStringLn(Concat(chr(9),StringFromNum(ir), ':  ', charstatename(ic, ir)));			end	end;{----------------------------------------------------------------------------}	procedure NotesToText;	begin		DrawTime(nil);		StatusNotes;	end;{-----------------------------------------------------------------------------}	procedure DoSaveOtherMenu (itemNo: integer);		label			1;		var			theInfo: FInfo;			thefile: integer;			oldexists: BOOLEAN;			writename: str255;			Freply: StandardFileReply;			tempFs: FSSpec;	begin		oldexists := false;		case itemNo of			SvTxtWindowItem:				begin					if frontwindow = chartwindow then						PutStandardFile('Save Chart file as', 'Untitled Chart',  Freply)					else if IsInfoWindow(frontwindow) then						PutStandardFile('Save List file as', concat(InfoObjectName[WhichInfoWindow(frontwindow)],' List'), Freply)				end;			SvTxtNotesItem:				begin					PutStandardFile('Save Notes file as', 'Untitled Notes', Freply)				end;			SvTxtNodeListItem:				begin					if (traceshown = traceAllChanges) then						PutStandardFile('Save Branch List file as', 'Untitled Branch List', Freply)					else						PutStandardFile('Save Node List file as', 'Untitled Node List',  Freply);				end;			SvTxtCharListItem:				begin					PutStandardFile('Save Names file as', 'Untitled Names', Freply)				end;			otherwise				PutStandardFile('Save file as', 'Untitled',  Freply);		end;		ShowCursor;		if Freply.sfgood then			FSpCreateSaveFile(Freply.sfFile, oldexists, 'ttxt', 'TEXT')		else			Errorflag := true;		if errorflag then			goto 1;		if oldexists then   			tempFs:= Freply.sffile;		StartWrite;		DrawToFile := true;		case itemNo of			SvTxtWindowItem: 				begin					StampFile;					StampFileName;					if frontwindow = chartwindow then						begin							if CWView = infoview then								ChartSummaryToText							else								ChartToText;						end					else if IsInfoWindow(frontwindow) then						begin							if treeopen then								begin									DrawWriteReturn;									DrawWriteStringLn(CurrentTreeStamp);									DrawWriteReturn;								end;							InfoWindowToText(WhichInfoWindow(frontwindow));						end;				end;			SvTxtNotesItem: 				NotesToText;			SvTxtNodeListItem: 				NodeListsToText;			SvTxtCharListItem:				CharListsToText;			otherwise				;		end;		EndWrite;		DrawToFile := false;		if errorflag then			goto 1;		if oldexists then				FSpExchangeFilesDeleteTemp(tempFs)		else 			tempFs:= FDI^[writeFileFDI].fs; 1:	end;end.