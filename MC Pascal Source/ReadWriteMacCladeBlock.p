unit ReadWriteMacCladeBlock;{еееееееееееееееееееееее}interface	uses		QuickDraw, Types, Events, QuickDrawText, OSUtils, TextUtils, Controls, Menus, Files, Windows, Sound, Dialogs,		 TextEdit, Lists, ToolUtils, Memory, Fonts, Resources, Scrap, 		Globals, MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, ErrorUtil, EventUtil, GenUtil,  SetLibInterface, WriteUtil, UtilLibInterface, StrUtil, BoxUtil, 		CharUtil, SymbolsNames, ReadWriteUtil, ReadUtil, SpreadUtil, ConsensusSequences;	procedure ReadWriteConsensusSettings(doRead: boolean; consensusNumber, version: integer);	procedure ReadWriteWindowPositionSettings(doRead: boolean);	procedure ReadWriteMacCladeBlock(doRead: boolean);{еееееееееееееееееееееее}implementation {е$S ReadWriteMacCladeBlock}{----------------------------------------------------------------------------}	procedure ReadWriteConsensusSettings(doRead: boolean; consensusNumber, version: integer);		var			ds: str255;			j, taxSetNumber: integer;			theConsensus : ConsensusPtr;	begin		if doRead then			begin				if version >= 55 then					begin						theConsensus := nil;						if not editorShowConsensusSequences then							begin								editorShowConsensusSequences := true;								theConsensus := editorConsensus;							end						else							begin								editorShowConsensusSequences := true;								AddNewConsensus;								theConsensus := Consensus(editorNumConsensusSequences);							end;												if theConsensus <> nil then							begin								ds := MakeCaps(GetFileToken(maxtok));								j := TokenToInteger(ds, true);								if (j>=0) & (j<= 100) then									theConsensus^.majorityPercent := j;								theConsensus^.majorityFraction := theConsensus^.majorityPercent/100.00;								GetBooleanFromFile(theConsensus^.exactMatch);								GetBooleanFromFile(theConsensus^.dimProportionalToFreq);								GetBooleanFromFile(theConsensus^.dimProportionalToNonGaps);								GetBooleanFromFile(theConsensus^.showOnlyFullMajority);								GetBooleanFromFile(theConsensus^.showModalFreqOnMove);								GetBooleanFromFile(theConsensus^.dontShowTies);							end;					end;				Skipper([';'], true);  {skip past semicolon}			end		else			begin				theConsensus := Consensus(consensusNumber);				if theConsensus <>nil then					begin						PutTabToken('Consensus ');						putToken(StringFromNum(theConsensus^.majorityPercent));						putSpace;						putBoolean(theConsensus^.exactMatch);						putBoolean(theConsensus^.dimProportionalToFreq);						putBoolean(theConsensus^.dimProportionalToNonGaps);						putBoolean(theConsensus^.showOnlyFullMajority);						putBoolean(theConsensus^.showModalFreqOnMove);						putBoolean(theConsensus^.dontShowTies);						putSingleChar(';');						putReturn;					end;			end;	end;{----------------------------------------------------------------------------}end.