unit SetStates;{еееееееееееееееееееееее}{MacClade Source Code}{Copyright Wayne P. Maddison and David R. Maddison 1986-1991}{No portions of the source code of MacClade can be used in any program,}{or published in any form, without the express written consent of }{Wayne or David Maddison}{еееееееееееееееееееееее}{еееееееееееееееееееееее}interface	uses		QuickDraw,  Types, Events, QuickDrawText, OSUtils, TextUtils, menus, Windows, Sound, Dialogs, TextEdit, QuickDrawText,Lists, ToolUtils, Memory, Fonts, Resources, Scrap,  Globals, SetLibInterface, UtilLibInterface,  MemoryUtil, CarbonUtil, SimpleUtil, WindowUtil, ErrorUtil, EventUtil, GenUtil, StrUtil, BoxUtil, TaxonCHUtil, TypeUtil, Charutil, UtilLibInterface, SetLibInterface,   Dollo;	procedure ResetTreeStatesH;	procedure SetTaxaDnSts (ist, iend: integer);implementation {е$S SetStates}{-----------------------------------------------------------------------------}{##############  STATES OF TERMINAL NODES  ###################}{This unit deals with the states of terminal nodes on the tree.}{It has two main functions:]}{-- to reset the downpass states at the terminal nodes, using the observed states of the}{terminal taxa.  Since these downpass states do not change for tree rearrangements, }{they only need to be redone for new trees or when taxa included/excluded from tree}{-- to recalculate the states observed in the taxa in the tree}{-----------------------------------------------------------------------------}	procedure ResetTreeStatesChar (ic: integer);{FROZEN 3.0}{gets the set of all states in observed taxa in tree for character ic}		var			TaxonHdl: thdl;			tsts: largestsetchars;			it: integer;			N: Nptr;	begin		if allowCursorChange then SetCursor(StatesCurs);		tsts := [];		for it := 1 to numtaxa do			if TaxonInTree(it) then				begin					taxonHdl := gettaxonHdl(it);					N := taxonHdl^^.N;		{for each taxon in tree, add its observed states in character ic}					if not Qtaxon(N, ic) then						tsts := tsts + GetTaxonStsLargest(it, ic);				end;	{get rid of high bits & store result in chstates}		TransferStatesFromLargest(Ptr(GetMaster(chstatesH) + chsb * ord4(ic - 1)), ZeroHighBitsLg(tsts));	end;{-----------------------------------------------------------------------------}	procedure ResetTreeStatesH;{FROZEN 3.0}{accumulates set of all observed states in taxa of tree for all characters}		var			taxstsHdl: Handle;			taxonHdl: thdl;			ic, it, firstit: integer;			tsts: largestsetchars;			cstatesP: Ptr;			oldstate: SignedByte;	begin		if allowCursorChange then SetCursor(StatesCurs);{==== resetting chstatesH ====} {initialize CstatesP^ to states of first taxon in tree}		firstit := 0;		repeat			firstit := firstit + 1;		until TaxonInTree(firstit);		TaxStsHdl := gettaxstshdl(firstit);		CopyHandles(TaxStsHdl, chstatesH);		TaxonHdl := gettaxonHdl(firstit);{now add to CstatesP^  states of other taxa in tree}		for it := firstit + 1 to numtaxa do			if TaxonInTree(it) then				begin					TaxStsHdl := gettaxstshdl(it);					MergeHandles(TaxStsHdl, chstatesH, srcor);  {add sets in}				end;		LockHandle(chstatesH, oldstate);		cstatesP := Ptr(GetMaster(chstatesH));		for ic := 1 to numchars do  {v4:  put this in assembly}			begin				ZeroHighBitsP(CstatesP);				cstatesP := Ptr(ord4(cstatesP) + chsb);			end;		ResetHandle(chstatesH, oldstate);	end;{-----------------------------------------------------------------------------}	procedure STaxonC (numbytes: integer; NdnstP: Ptr; ctypP: IP; cpLP: LIP; ChstuffP: ptr; ichars: integer);	external;	procedure STaxonDASM (numbytes: integer; NdnstP: Ptr; ctypP: IP; cpLP: LIP; ChstuffP: ptr; ichars: integer);	begin	{Wayne: v3.5  DELETE}	end;{This assembly procedure is called below; it sets the downpass states in NdnstP for}{unordered, ordered, irreversible and fisher characters.  }{It also counts the length due to polymorphism for unordered, ordered and irreversible }{characters.}{For more information see DownPassTraced which does similarly in Pascal}{For all character types it also clears the footnote and footpict bits and calculates whether any taxa have multiple}{states for the character.}{-----------------------------------------------------------------------------}	procedure SetTaxaDnSts (ist, iend: integer);{FROZEN 3.0}{This is the critical procedure which initializes the downpass sets for terminal nodes}{for all non-user-defined types.  This is used only for non-traced characters}{(terminal downstates set in Downpass for traced character)}{This downstate setting of terminals is needed only when tree is rebuilt or taxa added}{or subtracted; not needed on branch moves.}{Goals of this procedure:}{-- set downpass sets at terminal nodes}{-- calculate sureset for tree, used for maxminlength calculations (sureset is set of states}{observed with certainty, i.e. in monomorphic and polymorphic taxa)}{-- calculate singletons for tree, used for maxminlength calculations (singletons is set of states}{observed in monomorphic taxa)}{-- set whether multistate taxon found in tree for character}{NOTE: IF ist = iend THEN ASSUMED ist=1 AND iend=numchars}		type			chsPtr = ^chstype;			chstype = record		{a temporary character record which is sent to an assembly procedure.  Its structure, especially}								{of bools, is a historical artifact}					bools: set of 0..31;					sureset, singletons: largestsetchars; { offsets +0; +4, +8 }					maxst: integer;{ offset +12 }				end;{NOTE: size of chstype must be 14 for ASM to work}		var			minL, maxL: integer;			charHdl: chHdl;			TaxonHdl: thdl;			NdnstP: Ptr;			ctypP: IP;			cpLP: LIP;			N: Nptr;			ic, it: integer;			ChblockP: ptr;			ChStuffp: chsptr;			taxonsts: largestsetchars;			taxstsHdl: Handle;			oldstate1, oldstate2, oldstate3: SignedByte;	begin		if allowCursorChange then SetCursor(DnstsCurs);		LockHandle(chtypH, oldstate1);		LockHandle(chpLH, oldstate2);		cpLP := LIP(GetMaster(chpLH) + chpb * ord4(ist - 1));		ChblockP := NewPtr(longint(iend - ist + 1) * sizeof(chstype));		ChstuffP := Chsptr(ChblockP);		{ChblockP is temp ptr used to make space for chsptr CHstuffP; }		{also ChstuffP is incremented and ChblockP holds the place}		for ic := ist to iend do			begin		{initializing length due to polymorphism to 0 for all characters, even user-defined}				cpLP^ := 0;				cpLP := LIP(ord4(cpLP) + chpb);		{getting info from characters & initializing values for local char info}				charHdl := getchhdl(ic);				ChstuffP^.bools := [];				ChstuffP^.maxst := charhdl^^.maxst;				ChstuffP^.sureset := [];  {sureset = set of states in monomorphic/polymorphic taxa}				ChstuffP^.singletons := []; {singletons = set of states in monomorphic taxa}				ChstuffP := Chsptr(ord4(ChstuffP) + sizeof(chstype));			end;{=== SetStates ===}		for it := 1 to numtaxa do			if TaxonInTree(it) then				begin					TaxonHdl := gettaxonHdl(it);					N := taxonHdl^^.N; {Get terminal node associated with taxon # it}					TaxStsHdl := getTaxstsHdl(it);{first, as default, just move observed taxon states directly into downstates}					if (ist = iend) then  {one character only}						SetDnstLargest(N, ist, gettaxonstsLargest(it, ist))					else if (ist = 1) and (iend = numchars) then {all characters}						CopyHandles(TaxStsHdl, N^.dnstH);					LockHandle(N^.dnstH, oldstate3);{initialize pointers for downstates, types and polymorphism lengths (handles for latter two locked above)}					NdnstP := Ptr(GetMaster(N^.dnstH) + tcb * ord4(ist - 1));					ctypP := IP(GetMaster(chtypH) + chtb * ord4(ist - 1));					cpLP := LIP(GetMaster(chpLH) + chpb * ord4(ist - 1));		{Call assembly procedure to readjust downstates and records polymorphism length}           {Note that for dollo, user-defined only cuts out FT,FP; for fisher only does downstates}		{****************}					STaxonC(tcb, NdnstP, CtypP, CpLP, ChblockP, iend - ist + 1);		{****************}{Dollo and fisher characters need adjustment.  The ASM procedure ignored Dollo characters,}{and did not count length due to polymorphism for Fisher characters.  Both these needs}{are fulfilled below}					if Anytype([fisher, dollo]) then						begin{don't need to reset NdnstP, ctypP, cpLP because not altered in STaxonDASM}{ NOTE: dollo completely ignored in ASM except for cutting out FT and FP}{reset pointer to chstuff}							ChstuffP := Chsptr(ChblockP); {reset chstuffP to start}							for ic := ist to iend do								begin									if CtypP^ = dollo then										begin				{  the dollo downstates need to be packed using SettoPackedDollo functions}											if (cardP(NdnstP, maxbit) > 1) then  {more than one state in dollo character}												begin  {============= Multi-state TAXON Dollo======}													MaxMin(NdnstP, maxbit, minL, maxL);													if maxL > dollosize - 1 then  {state too large for dollo character}														NewError(52, ic);													if bittst(NdnstP, uco) then  {======  UNCERTAIN Dollo======}														TransferStatesFromLargest(NdnstP, SetToPackedDolloUncert([minL..maxL], ChstuffP^.Maxst))													else														begin {======  POLYMORPHIC Dollo ======}															cpLP^ := cpLP^ + maxL - minL; {add length due to polymorphism}															TransferStatesFromLargest(NdnstP, SetToPackedDolloCert([minL, maxL], ChstuffP^.Maxst));														end												end											else if Bittst(NdnstP, MSo) then {=========== MISSING DATA Dollo======}												TransferStatesFromLargest(NdnstP, OldSetFromNew(PackDollo3(nil, nil, MakeSpan(0, ChstuffP^.Maxst))))											else{======  MONOMORPHIC Dollo======}												TransferStatesFromLargest(NdnstP, SetToPackedDolloCert(GetLargestfromPtr(NdnstP), ChstuffP^.Maxst));										end									else if CtypP^ = fisher then {dealing with polymorphism length; downstates already set in ASM}										begin											taxonsts := GetTaxonStsLargest(N^.name, ic);											if MultipleStatesLg(taxonsts) then												if not (UCl in taxonsts) then													cpLP^ := cpLP^ + FisherDistance(taxonsts, false); {count strata missed within polymorphism}										end;									ctypP := IP(ord4(ctypP) + chtb);									cpLp := LIP(ord4(cplP) + chpb);									NdnstP := Ptr(ord4(NdnstP) + tcb);									ChstuffP := Chsptr(ord4(ChstuffP) + sizeof(chstype));								end;						end;					ResetHandle(N^.dnstH, oldstate3);				end; {it from 1 to numtaxa}		ResetHandle(chtypH, oldstate1);		ResetHandle(chpLH, oldstate2);		ChstuffP := Chsptr(ChblockP);		for ic := ist to iend do  {now extract calculated info. from temporary block and put in charhdl storage}			begin				charHdl := GetChHdl(ic);				charHdl^^.MSTTree := 7 in CHStuffP^.bools;{mstaxa bit is assumed to be 7 in SettaxonDASM}				CharHdl^^.sureset := ChstuffP^.sureset;				CharHdl^^.singletons := ChstuffP^.singletons;				ChstuffP := Chsptr(ord4(ChstuffP) + sizeof(chstype));			end;		ZapPointer(chBlockP);{now reset states observed in tree}		if ist = iend then			ResetTreeStatesChar(ist)		else			ResetTreeStatesH;		if allowCursorChange then SetCursorToArrow;	end;end.